"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-default-key-for-development')

# SECURITY WARNING: don't run with debug turned on in production!
# Legge il valore di DEBUG dal file .env. Se non lo trova, il default è False.
DEBUG = config('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='127.0.0.1,localhost').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',

    # Le nostre App    
    'accounts',
    'tenants',
    'gestionale',
    'superadmin'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',  # <-- Assicurati che sia qui
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'config.middleware.TenantMiddleware',  # Il nostro middleware personalizzato
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# Abilita la compressione e caching
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Percorso assoluto della cartella static (raccolti con collectstatic)
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        # Ora leggiamo tutti i valori dal nostro file .env usando la funzione config()
        'NAME': config('DB_NAME'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOST'),
        'PORT': config('DB_PORT', cast=int), # cast=int per convertirlo in numero
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

# Imposta la lingua italiana come predefinita
LANGUAGE_CODE = 'it-it'  # Cambiato da 'en-us' a 'it-it'

# Imposta il fuso orario italiano
TIME_ZONE = 'Europe/Rome'  # Cambiato da 'UTC' a 'Europe/Rome'

# Abilita l'internazionalizzazione (supporto per più lingue)
USE_I18N = True

# Abilita la localizzazione (formati locali per date, numeri, ecc.)
USE_L10N = True  # Aggiungi questa riga se non c'è già

# Abilita il supporto per i fusi orari
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [ BASE_DIR / 'static', ]

# === AGGIUNGI QUESTE IMPOSTAZIONI PER WHITENOISE ===
# La cartella dove 'collectstatic' raccoglierà tutti i file statici
STATIC_ROOT = BASE_DIR / 'staticfiles'
# Il motore di storage che comprime i file e gestisce il caching
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Dice a Django di usare il nostro modello User personalizzato
# per tutto ciò che riguarda l'autenticazione.
AUTH_USER_MODEL = 'accounts.User'

# ==============================================================================
# === IMPOSTAZIONI DI AUTENTICAZIONE                                        ===
# ==============================================================================

# L'URL a cui reindirizzare gli utenti se provano ad accedere a una pagina
# protetta senza essere loggati. Deve corrispondere al 'name' nel nostro urls.py.
LOGIN_URL = 'login'

# L'URL a cui reindirizzare gli utenti DOPO aver effettuato il login con successo.
# La nostra vista di login personalizzata ha già questa logica, ma è una
# buona pratica impostarlo anche qui per coerenza.
LOGIN_REDIRECT_URL = 'tenant_selection'

# L'URL a cui reindirizzare gli utenti DOPO aver effettuato il logout.
# Lo reindirizziamo alla pagina di login.
LOGOUT_REDIRECT_URL = 'login'

